// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MLFA
List MLFA(int nb_composantes, int nb_facteur, const Eigen::MatrixXd& X, const Eigen::MatrixXd& Y, const Eigen::MatrixXd& Z, const Eigen::VectorXd& id, const std::vector<Eigen::MatrixXd>& Lam, const std::vector<Eigen::MatrixXd>& beta, const std::vector<Eigen::MatrixXd>& tau, const std::vector<Eigen::MatrixXd>& s_e, const std::vector<Eigen::MatrixXd>& s_b, int max_it, const Eigen::VectorXd& pro2, int nb_sujet, int J, int p, Rcpp::IntegerVector fixed_factor);
RcppExport SEXP _MixLFA_MLFA(SEXP nb_composantesSEXP, SEXP nb_facteurSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP idSEXP, SEXP LamSEXP, SEXP betaSEXP, SEXP tauSEXP, SEXP s_eSEXP, SEXP s_bSEXP, SEXP max_itSEXP, SEXP pro2SEXP, SEXP nb_sujetSEXP, SEXP JSEXP, SEXP pSEXP, SEXP fixed_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nb_composantes(nb_composantesSEXP);
    Rcpp::traits::input_parameter< int >::type nb_facteur(nb_facteurSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type Lam(LamSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type s_e(s_eSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type s_b(s_bSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type pro2(pro2SEXP);
    Rcpp::traits::input_parameter< int >::type nb_sujet(nb_sujetSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type fixed_factor(fixed_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(MLFA(nb_composantes, nb_facteur, X, Y, Z, id, Lam, beta, tau, s_e, s_b, max_it, pro2, nb_sujet, J, p, fixed_factor));
    return rcpp_result_gen;
END_RCPP
}
